# GA4タグ埋め込みによるページビュー数・離脱率計測の完全ガイド

## 目次
1. 事前準備
2. GA4プロパティの作成
3. GA4タグの生成
4. Next.jsプロジェクトでの実装
5. 動作確認とテスト
6. 追加設定とカスタマイズ

---

## 1. 事前準備

### 必要なもの
- Googleアカウント
- アクセス可能なNext.jsプロジェクト
- ドメイン（本番環境用）

### 理解しておくべき用語
- **GA4（Google Analytics 4）**: ウェブサイト分析ツール
- **測定ID**: GA4の識別子（G-XXXXXXXXXX形式）
- **データレイヤー**: イベントデータを格納する配列
- **gtag**: Google Analytics用のJavaScript関数

---

## 2. GA4プロパティの作成

### Step 1: GA4にアクセス
1. ブラウザで https://analytics.google.com/ にアクセス
2. Googleアカウントでログイン

### Step 2: プロパティ作成
1. 「プロパティを作成」をクリック
2. プロパティ名を入力（例：「ロジカプロモAI」）
3. レポートのタイムゾーンを選択（Asia/Tokyo）
4. 通貨を選択（日本円）
5. 「次へ」をクリック

### Step 3: ビジネス情報の入力
1. ビジネスの規模を選択
2. ビジネスの目的を選択
3. 「次へ」をクリック

### Step 4: データストリームの作成
1. プラットフォームで「ウェブ」を選択
2. ウェブサイトのURLを入力（例：http://localhost:3000）
   - **注意：現在は確認用のURLを入力。本番環境のURLに変更する必要があります**
   - デプロイ後に実際のURLに更新してください
3. ストリーム名を入力（例：「ロジカプロモAI メインサイト」）
4. 「ストリームを作成」をクリック

### Step 5: 測定IDの確認
- 作成後、G-XXXXXXXXXX形式の測定IDが表示されます
- このIDをメモしておいてください（後で使用）

---

## 3. GA4タグの生成

### Step 1: データストリームの設定
1. GA4の管理画面で「データストリーム」をクリック
2. 作成したウェブストリームを選択

### Step 2: タグの設定
1. 「タグの設定」セクションで「グローバルサイトタグ（gtag.js）」を選択
2. 測定IDが表示されます（G-XXXXXXXXXX）
3. このIDをコピーしておいてください

---

## 4. Next.jsプロジェクトでの実装

### Step 1: 環境変数の設定
1. プロジェクトのルートディレクトリに `.env.local` ファイルを作成
2. 以下の内容を追加：

```env
NEXT_PUBLIC_GA_MEASUREMENT_ID=G-XXXXXXXXXX
```

※ G-XXXXXXXXXXは実際の測定IDに置き換えてください

### Step 2: GA4コンポーネントの作成
1. `src/components/` ディレクトリに `GoogleAnalytics.tsx` ファイルを作成
2. 以下のコードを追加：

```tsx
'use client';

import Script from 'next/script';

interface GA4Props {
  measurementId: string;
}

export default function GoogleAnalytics({ measurementId }: GA4Props) {
  return (
    <>
      <Script
        src={`https://www.googletagmanager.com/gtag/js?id=${measurementId}`}
        strategy="afterInteractive"
      />
      <Script id="google-analytics" strategy="afterInteractive">
        {`
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', '${measurementId}');
        `}
      </Script>
    </>
  );
}
```

### Step 3: レイアウトファイルの更新
1. `src/app/layout.tsx` ファイルを開く
2. 以下のように更新：

```tsx
import GoogleAnalytics from '@/components/GoogleAnalytics';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const measurementId = process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID || '';

  return (
    <html lang="ja">
      <head>
        <GoogleAnalytics measurementId={measurementId} />
      </head>
      <body>
        {children}
      </body>
    </html>
  );
}
```

### Step 4: ページビュー追跡の追加（オプション）
1. `src/components/` ディレクトリに `PageViewTracker.tsx` ファイルを作成
2. 以下のコードを追加：

```tsx
'use client';

import { usePathname, useSearchParams } from 'next/navigation';
import { useEffect } from 'react';

declare global {
  interface Window {
    gtag: (...args: any[]) => void;
  }
}

export default function PageViewTracker() {
  const pathname = usePathname();
  const searchParams = useSearchParams();

  useEffect(() => {
    if (pathname && window.gtag) {
      window.gtag('config', process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID, {
        page_path: pathname,
      });
    }
  }, [pathname, searchParams]);

  return null;
}
```

3. `layout.tsx` にPageViewTrackerコンポーネントを追加：

```tsx
import GoogleAnalytics from '@/components/GoogleAnalytics';
import PageViewTracker from '@/components/PageViewTracker';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const measurementId = process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID || '';

  return (
    <html lang="ja">
      <head>
        <GoogleAnalytics measurementId={measurementId} />
      </head>
      <body>
        <PageViewTracker />
        {children}
      </body>
    </html>
  );
}
```

---

## 5. 動作確認とテスト

### Step 1: ローカル環境でのテスト
1. 開発サーバーを起動：
```bash
npm run dev
```

2. ブラウザで http://localhost:3000 にアクセス
3. 開発者ツール（F12）を開く
4. 「Console」タブでエラーがないか確認
5. 「Network」タブでGA4のリクエストが送信されているか確認

### Step 2: GA4での確認
1. GA4の管理画面にアクセス
2. 左メニューから「レポート」→「リアルタイム」を選択
3. サイトにアクセスして、リアルタイムレポートに表示されるか確認

### Step 3: 本番環境でのテスト
1. サイトを本番環境にデプロイ
2. 実際のドメインでアクセスしてテスト
3. GA4のリアルタイムレポートで確認

---

## 6. 追加設定とカスタマイズ

### カスタムイベントの設定例

#### お問い合わせフォーム送信の追跡
```javascript
// フォーム送信時に実行
window.gtag('event', 'form_submit', {
  form_name: 'contact_form',
  page_location: window.location.href
});
```

#### ダウンロードボタンクリックの追跡
```javascript
// ダウンロードリンクのクリック時に実行
window.gtag('event', 'file_download', {
  file_name: '資料ダウンロード',
  page_location: window.location.href
});
```

### 離脱率の確認方法
1. GA4の管理画面にアクセス
2. 左メニューから「エンゲージメント」→「ページとスクリーン」を選択
3. 「離脱率」の列で確認

### プライバシー対応
1. Cookie同意バナーの実装
2. プライバシーポリシーの更新
3. データ保持期間の設定

---

## トラブルシューティング

### よくある問題と解決方法

#### 1. タグが発火しない
- 環境変数が正しく設定されているか確認
- 測定IDが正しいか確認
- 開発者ツールでエラーがないか確認

#### 2. GA4にデータが表示されない
- 測定IDが正しいか確認
- データストリームの設定を確認
- リアルタイムレポートで確認

#### 3. 開発環境でエラーが発生
- 環境変数ファイル（.env.local）が正しく配置されているか確認
- Next.jsの設定を確認

---

## 完了チェックリスト

- [ ] GA4プロパティ・データストリームの作成
- [ ] 環境変数の設定
- [ ] GA4コンポーネントの実装
- [ ] レイアウトファイルの更新
- [ ] ローカル環境でのテスト
- [ ] 本番環境でのテスト
- [ ] GA4でのデータ確認

---

## 参考リンク

- [Google Analytics 4 ヘルプ](https://support.google.com/analytics/)
- [Next.js ドキュメント](https://nextjs.org/docs)

---

## 注意事項

1. **プライバシー**: ユーザーのプライバシーを尊重し、適切な同意を得てからデータを収集してください
2. **データ保護**: 収集したデータは適切に管理し、不要になったら削除してください
3. **法規制**: GDPR、個人情報保護法などの関連法規制を遵守してください
4. **定期的な確認**: 設定後は定期的にデータが正常に収集されているか確認してください

このガイドに従って設定することで、サイトのページビュー数や離脱率を正確に計測できるようになります。

---

## 将来的な拡張について

### GTMへの移行が必要になるケース
- カスタムイベントの大量追加
- 複数のツールの統合管理
- 条件分岐による動的なタグ発火
- 非技術者によるタグ管理

### GTMへの移行方法
1. GTMアカウント・コンテナを作成
2. GA4タグを削除
3. GTMタグに置き換え
4. 既存のGA4プロパティをそのまま使用

**移行は簡単**: データの連続性は保たれ、既存のGA4プロパティをそのまま使用可能です。
